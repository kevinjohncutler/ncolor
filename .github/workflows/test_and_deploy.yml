name: CI/CD

on:
  push:
    branches:
      - main
    tags:
      - "v*"  # e.g. v1.0, v2.0
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  test:
    name: Test on ${{ matrix.os }} (Python ${{ matrix.python_version }})
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python_version: ['3.10']
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python_version }}

      - name: Install package in editable mode
        run: |
          python -m pip install --upgrade pip --no-cache-dir
          pip install -e . --no-cache-dir

      - name: Install tox
        run: pip install --no-cache-dir tox

      - name: Run tests with tox
        run: tox
        env:
          PLATFORM: ${{ matrix.os }}

      - name: Upload coverage & junit artifacts
        if: matrix.os == 'macos-latest'
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: |
            coverage.xml
            junit.xml

  deploy:
    name: Deploy Package
    runs-on: ubuntu-latest
    needs: test
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install build tools
        run: |
          python -m pip install --upgrade pip --no-cache-dir
          pip install --no-cache-dir build twine setuptools setuptools_scm wheel

      - name: Build distribution
        run: python -m build --sdist --wheel

      - name: Publish to PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.TWINE_API_KEY }}
        run: python -m twine upload dist/*
  badges:
    name: Build and commit badges
    runs-on: macos-latest
    needs: test
    steps:
      - uses: actions/checkout@v3

      - name: Download test artifacts
        uses: actions/download-artifact@v4
        with:
          name: test-results

      - name: Install badge dependencies
        run: |
          python -m pip install --upgrade pip
          pip install genbadge[coverage]

      - name: Generate badges
        run: |
          mkdir -p badges
          genbadge coverage -i coverage.xml -o badges/coverage.svg
          genbadge tests -i junit.xml -o badges/tests.svg

      - name: Commit badges
        if: github.ref == 'refs/heads/main'
        uses: EndBug/add-and-commit@v9
        with:
          add: 'badges/*.svg'
          message: 'CI: update coverage and test badges'