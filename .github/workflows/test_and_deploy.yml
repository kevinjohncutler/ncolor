name: CI/CD

on:
  push:
    branches:
      - main
    tags:
      - "v*" # e.g. v1.0, v2.0
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  test:
    name: ${{ matrix.os }} (Python ${{ matrix.python_version }})
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python_version: [3.9]
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python_version }}

      - name: Install OS-specific dependencies
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update -y
          sudo apt-get install -y libdbus-1-3 libxkbcommon-x11-0 libxcb-icccm4 \
            libxcb-image0 libxcb-keysyms1 libxcb-randr0 libxcb-render-util0 \
            libxcb-xinerama0 libxcb-xinput0 libxcb-xfixes0 pkg-config \
            libhdf5-dev libhdf5-hl-dev

      - name: Install Windows OpenGL Dependencies
        if: runner.os == 'Windows'
        run: |
          git clone --depth 1 https://github.com/pyvista/gl-ci-helpers.git
          powershell gl-ci-helpers/appveyor/install_opengl.ps1

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install dask dask_image scikit-learn wheel setuptools tox tox-gh-actions

      - name: Run tests with tox
        run: tox
        env:
          PLATFORM: ${{ matrix.os }}

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3

  deploy:
    name: Deploy Package
    runs-on: ubuntu-latest
    needs: test
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.9

      - name: Install build tools
        run: |
          python -m pip install --upgrade pip
          pip install build twine setuptools setuptools_scm wheel

      - name: Build distribution
        run: |
          python -m build --sdist --wheel

      - name: Publish to PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.TWINE_API_KEY }}
        run: |
          python -m twine upload dist/*